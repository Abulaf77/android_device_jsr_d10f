From dd2c19bdf75cfa69da01819ac47b5a3b3ec9bbe4 Mon Sep 17 00:00:00 2001
From: S-trace <S-trace@list.ru>
Date: Sun, 3 Apr 2016 17:35:17 +0300
Subject: [PATCH] [TORCH] Use sysfs interface for SystemUI FlashlightController

This should improve stability, performance and battery consumption of Flashlight QuickSettings title

Change-Id: I65cd7a07f559d3e7f4cf505c164e2b50f50283cb
---
 .../statusbar/policy/FlashlightController.java     | 45 ++++++++++++++--------
 1 file changed, 29 insertions(+), 16 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java b/packages/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java
index 96162ec..4ba3955 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/policy/FlashlightController.java
@@ -37,6 +37,9 @@ import android.util.Log;
 
 import com.android.systemui.R;
 
+import java.io.FileWriter;
+import java.io.IOException;
+
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
 import java.lang.ref.WeakReference;
@@ -54,10 +57,16 @@ public class FlashlightController {
     private static final int DISPATCH_CHANGED = 1;
     private static final int DISPATCH_AVAILABILITY_CHANGED = 2;
 
+    public static final int OFF  = 0;
+    public static final int ON   = 127;
+    public static final int HIGH = 255;
+
+    private FileWriter mFlashDeviceWriter = null;
+
     private static final String ACTION_TURN_FLASHLIGHT_OFF =
             "com.android.systemui.action.TURN_FLASHLIGHT_OFF";
 
-    private final CameraManager mCameraManager;
+    private final CameraManager mCameraManager = null;
     private final Context mContext;
     /** Call {@link #ensureHandler()} before using */
     private Handler mHandler;
@@ -71,8 +80,8 @@ public class FlashlightController {
     /** Lock on {@code this} when accessing */
     private boolean mFlashlightEnabled;
 
-    private String mCameraId;
-    private boolean mTorchAvailable;
+    private final String mCameraId = null;
+    private boolean mTorchAvailable = true;
 
     private Notification mNotification = null;
     private boolean mReceiverRegistered;
@@ -94,33 +103,30 @@ public class FlashlightController {
 
     public FlashlightController(Context context) {
         mContext = context;
-        mCameraManager = (CameraManager) mContext.getSystemService(Context.CAMERA_SERVICE);
+        Log.d(TAG, "Initializing");
 
         PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
         mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
         mUseWakeLock = mContext.getResources().getBoolean(R.bool.config_useWakelockForFlashlight);
 
-        tryInitCamera();
+        tryInitWriter();
     }
 
-    private void tryInitCamera() {
+    private void tryInitWriter() {
+        FileWriter FlashDeviceWriter = null;
         try {
-            mCameraId = getCameraId();
+            FlashDeviceWriter = new FileWriter("/sys/class/leds/torch-light/brightness");
         } catch (Throwable e) {
             Log.e(TAG, "Couldn't initialize.", e);
             return;
-        }
-
-        if (mCameraId != null) {
-            ensureHandler();
-            mCameraManager.registerTorchCallback(mTorchCallback, mHandler);
+        } finally {
+            mFlashDeviceWriter = FlashDeviceWriter ;
         }
     }
 
     public void setFlashlight(boolean enabled) {
         boolean pendingError = false;
         synchronized (this) {
-            if (mCameraId == null) return;
             if (mFlashlightEnabled != enabled) {
                 mFlashlightEnabled = enabled;
 
@@ -133,8 +139,15 @@ public class FlashlightController {
                 }
 
                 try {
-                    mCameraManager.setTorchMode(mCameraId, enabled);
-                } catch (CameraAccessException e) {
+                    if (mFlashDeviceWriter != null) {
+                        int level = enabled ? ON : OFF;
+                        Log.d(TAG, "Setting torch level to " + String.valueOf(level));
+                        mFlashDeviceWriter.write(String.valueOf(level));
+                        mFlashDeviceWriter.flush();
+                    } else {
+                        Log.e(TAG, "mFlashDeviceWriter == null!!");
+                    }
+                } catch (Exception e) {
                     Log.e(TAG, "Couldn't set torch mode", e);
                     mFlashlightEnabled = false;
                     pendingError = true;
@@ -216,7 +229,7 @@ public class FlashlightController {
     public void addListener(FlashlightListener l) {
         synchronized (mListeners) {
             if (mCameraId == null) {
-                tryInitCamera();
+                tryInitWriter();
             }
             cleanUpListenersLocked(l);
             mListeners.add(new WeakReference<>(l));
-- 
2.9.3

