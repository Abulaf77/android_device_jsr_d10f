From cbe3791c29cab19e61dec96c531676edac3af66b Mon Sep 17 00:00:00 2001
From: remittor <remittor@gmail.com>
Date: Wed, 7 Oct 2015 18:39:27 +0300
Subject: [PATCH] Use kernel exFAT driver instead of FUSE

---
 Exfat.cpp  | 140 +++++++++++++++++++++++++++++++++++++++++++++++++------------
 Exfat.h    |   5 ++-
 Volume.cpp |   2 +-
 3 files changed, 119 insertions(+), 28 deletions(-)

diff --git a/Exfat.cpp b/Exfat.cpp
index 236ec8c..2a68144 100644
--- a/Exfat.cpp
+++ b/Exfat.cpp
@@ -42,47 +42,74 @@
 
 #include "Exfat.h"
 
+bool Exfat::moduleLoaded = false;
+
 static char EXFAT_FSCK[] = HELPER_PATH "fsck.exfat";
 static char EXFAT_MKFS[] = HELPER_PATH "mkfs.exfat";
-static char EXFAT_MOUNT[] = HELPER_PATH "mount.exfat";
+static char INSMOD_PATH[] = "/system/bin/insmod";
+static char EXFAT_MODULE[] = "/system/lib/modules/exfat.ko";
+static char GREP_PATH[] = "/system/bin/grep";
+static char FILESYSTEMS_PATH[] = "/proc/filesystems";
 
 int Exfat::doMount(const char *fsPath, const char *mountPoint,
                  bool ro, bool remount, bool executable,
-                 int ownerUid, int ownerGid, int permMask) {
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
 
-    int rc = -1;
+    if (!moduleLoaded) {
+        int lkm_rc = loadModule();
+        if (lkm_rc)
+            return lkm_rc;
+        moduleLoaded = true;
+    }
+
+    int rc;
+    unsigned long flags;
     char mountData[255];
-    const char *args[6];
-    int status;
 
-    if (access(EXFAT_MOUNT, X_OK)) {
-        SLOGE("Unable to mount, exFAT FUSE helper not found!");
-        return rc;
+    flags = MS_NODEV | MS_NOSUID | MS_DIRSYNC;
+    flags |= (executable ? 0 : MS_NOEXEC);
+    flags |= (ro ? MS_RDONLY : 0);
+    flags |= (remount ? MS_REMOUNT : 0);
+
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
     }
 
     sprintf(mountData,
-            "noatime,nodev,nosuid,dirsync,uid=%d,gid=%d,fmask=%o,dmask=%o,%s,%s",
-            ownerUid, ownerGid, permMask, permMask,
-            (executable ? "exec" : "noexec"),
-            (ro ? "ro" : "rw"));
-
-    args[0] = EXFAT_MOUNT;
-    args[1] = "-o";
-    args[2] = mountData;
-    args[3] = fsPath;
-    args[4] = mountPoint;
-    args[5] = NULL;
+            "uid=%d,gid=%d,fmask=%o,dmask=%o",
+            ownerUid, ownerGid, permMask, permMask);
 
-    SLOGW("Executing exFAT mount (%s) -> (%s)", fsPath, mountPoint);
-
-    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
-            true);
+    rc = mount(fsPath, mountPoint, "exfat", flags, mountData);
 
     if (rc && errno == EROFS) {
         SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
-        strcat(mountData, ",ro");
-        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
-            true);
+        flags |= MS_RDONLY;
+        rc = mount(fsPath, mountPoint, "exfat", flags, mountData);
+    }
+
+    if (rc == 0 && createLost) {
+        char *lost_path;
+        asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+        if (access(lost_path, F_OK)) {
+            /*
+             * Create a LOST.DIR in the root so we have somewhere to put
+             * lost cluster chains (fsck_msdos doesn't currently do this)
+             */
+            if (mkdir(lost_path, 0755)) {
+                SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+            }
+        }
+        free(lost_path);
     }
 
     return rc;
@@ -162,3 +189,64 @@ int Exfat::format(const char *fsPath) {
     }
     return 0;
 }
+
+int Exfat::loadModule(void)
+{
+    const char *grep_args[5];
+    const char *args[3];
+    int rc = -1;
+    int status;
+
+    grep_args[0] = GREP_PATH;
+    grep_args[1] = "-q";
+    grep_args[2] = "exfat";
+    grep_args[3] = FILESYSTEMS_PATH;
+    grep_args[4] = NULL;
+
+    SLOGI("Checking for exFAT support");
+
+    rc = android_fork_execvp(ARRAY_SIZE(grep_args), (char **)grep_args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module already loaded or built-in");
+        return 0;
+    }
+    SLOGI("exFAT module not loaded yet or not supported. Try load exfat.ko ...");
+
+    if (access(INSMOD_PATH, X_OK)) {
+        SLOGE("Unable to load exfat.ko module, insmod not found.");
+        return -1;
+    }
+
+    if (access(EXFAT_MODULE, R_OK)) {
+        SLOGE("Unable to load exfat.ko module, exfat.ko not found.");
+        return -1;
+    }
+
+    args[0] = INSMOD_PATH;
+    args[1] = EXFAT_MODULE;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module loaded OK");
+    } else {
+        SLOGE("Loading exFAT module failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+
+    SLOGI("Checking for exFAT support again");
+
+    rc = android_fork_execvp(ARRAY_SIZE(grep_args), (char **)grep_args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module loaded successfully");
+        return 0;
+    } else {
+        SLOGE("Something wrong with exFAT module");
+        return -1;
+    }
+    return 0;
+}
diff --git a/Exfat.h b/Exfat.h
index 94c1d05..7dd65eb 100644
--- a/Exfat.h
+++ b/Exfat.h
@@ -22,9 +22,12 @@
 class Exfat {
 public:
     static int doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
-            bool executable, int ownerUid, int ownerGid, int permMask);
+            bool executable, int ownerUid, int ownerGid, int permMask, bool createLost);
     static int check(const char *fsPath);
     static int format(const char *fsPath);
+private:
+    static int loadModule(void);
+    static bool moduleLoaded;
 };
 
 #endif
diff --git a/Volume.cpp b/Volume.cpp
index 4196b2f..9ec9495 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -568,7 +568,7 @@ int Volume::mountVol() {
                 }
 
                 if (Exfat::doMount(devicePath, getMountpoint(), false, false, false,
-                        AID_MEDIA_RW, AID_MEDIA_RW, 0007)) {
+                        AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
                     SLOGE("%s failed to mount via EXFAT (%s)\n", devicePath, strerror(errno));
                     continue;
                 }
-- 
1.9.5.msysgit.0

