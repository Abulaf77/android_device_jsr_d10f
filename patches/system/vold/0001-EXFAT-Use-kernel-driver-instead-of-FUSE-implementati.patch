From a906565f856a5e13a57d503c1c1d583b7cfd2ed3 Mon Sep 17 00:00:00 2001
From: S-trace <S-trace@list.ru>
Date: Sun, 4 Oct 2015 18:29:07 +0300
Subject: [PATCH] [EXFAT] Use kernel driver instead of FUSE implementation
 Based on
 https://github.com/salieff/android_system_vold/commit/4b25917000952580d6c7a9092a26925af39f3130
 Modified by S-trace (allow exfat driver to be built-in into kernel)

Change-Id: I4fcd1cb125a816fb4d783101f08f418d83f45243
---
 Exfat.cpp      | 143 +++++++++++++++++++++++++++------
 Exfat.cpp.mine | 245 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Exfat.h        |   5 +-
 Volume.cpp     |   2 +-
 4 files changed, 367 insertions(+), 28 deletions(-)
 create mode 100644 Exfat.cpp.mine

diff --git a/Exfat.cpp b/Exfat.cpp
index f19569c..deb68ed 100644
--- a/Exfat.cpp
+++ b/Exfat.cpp
@@ -42,48 +42,76 @@
 #include <cutils/properties.h>
 
 #include "Exfat.h"
+bool Exfat::moduleLoaded = false;
 
 static char EXFAT_FSCK[] = "/system/bin/fsck.exfat";
 static char EXFAT_MKFS[] = "/system/bin/mkfs.exfat";
-static char EXFAT_MOUNT[] = "/system/bin/mount.exfat";
+static char INSMOD_PATH[] = "/system/bin/insmod";
+static char EXFAT_MODULE[] = "/system/lib/modules/exfat.ko";
+static char GREP_PATH[] = "/system/bin/grep";
+static char FILESYSTEMS_PATH[] = "/proc/filesystems";
 
 int Exfat::doMount(const char *fsPath, const char *mountPoint,
                  bool ro, bool remount, bool executable,
-                 int ownerUid, int ownerGid, int permMask) {
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    if (!moduleLoaded)
+    {
+        int lkm_rc = loadModule();
+        if (lkm_rc)
+            return lkm_rc;
 
-    int rc = -1;
+        moduleLoaded = true;
+    }
+
+    int rc;
+    unsigned long flags;
     char mountData[255];
-    const char *args[6];
-    int status;
 
-    if (access(EXFAT_MOUNT, X_OK)) {
-        SLOGE("Unable to mount, exFAT FUSE helper not found!");
-        return rc;
-    }
+    flags = MS_NODEV | MS_NOSUID | MS_DIRSYNC;
 
-    sprintf(mountData,
-            "noatime,nodev,nosuid,dirsync,uid=%d,gid=%d,fmask=%o,dmask=%o,%s,%s",
-            ownerUid, ownerGid, permMask, permMask,
-            (executable ? "exec" : "noexec"),
-            (ro ? "ro" : "rw"));
+    flags |= (executable ? 0 : MS_NOEXEC);
+    flags |= (ro ? MS_RDONLY : 0);
+    flags |= (remount ? MS_REMOUNT : 0);
 
-    args[0] = EXFAT_MOUNT;
-    args[1] = "-o";
-    args[2] = mountData;
-    args[3] = fsPath;
-    args[4] = mountPoint;
-    args[5] = NULL;
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
+    }
 
-    SLOGW("Executing exFAT mount (%s) -> (%s)", fsPath, mountPoint);
+    sprintf(mountData,
+            "uid=%d,gid=%d,fmask=%o,dmask=%o",
+            ownerUid, ownerGid, permMask, permMask);
 
-    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
-            true);
+    rc = mount(fsPath, mountPoint, "exfat", flags, mountData);
 
     if (rc && errno == EROFS) {
         SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
-        strcat(mountData, ",ro");
-        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
-            true);
+        flags |= MS_RDONLY;
+        rc = mount(fsPath, mountPoint, "exfat", flags, mountData);
+    }
+
+    if (rc == 0 && createLost) {
+        char *lost_path;
+        asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+        if (access(lost_path, F_OK)) {
+            /*
+             * Create a LOST.DIR in the root so we have somewhere to put
+             * lost cluster chains (fsck_msdos doesn't currently do this)
+             */
+            if (mkdir(lost_path, 0755)) {
+                SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+            }
+        }
+        free(lost_path);
     }
 
     return rc;
@@ -165,3 +193,66 @@ int Exfat::format(const char *fsPath) {
     }
     return 0;
 }
+
+int Exfat::loadModule(void) {
+    const char *grep_args[5];
+    const char *args[3];
+    int rc = -1;
+    int status;
+
+    grep_args[0] = GREP_PATH;
+    grep_args[1] = "-q";
+    grep_args[2] = "exfat";
+    grep_args[3] = FILESYSTEMS_PATH;
+    grep_args[4] = NULL;
+
+    SLOGI("Checking for exFAT support");
+
+    rc = android_fork_execvp(ARRAY_SIZE(grep_args), (char **)grep_args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module already loaded or built-in");
+        return 0;
+    }
+    else {
+        SLOGI("exFAT module not loaded yet or not supported");
+    }
+
+    if (access(INSMOD_PATH, X_OK)) {
+        SLOGE("Unable to load exfat.ko module, insmod not found.");
+        return -1;
+    }
+
+    if (access(EXFAT_MODULE, R_OK)) {
+        SLOGE("Unable to load exfat.ko module, exfat.ko not found.");
+        return -1;
+    }
+
+    args[0] = INSMOD_PATH;
+    args[1] = EXFAT_MODULE;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module loaded OK");
+    } else {
+        SLOGE("Loading exFAT module failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+
+    SLOGI("Checking for exFAT support again");
+
+    rc = android_fork_execvp(ARRAY_SIZE(grep_args), (char **)grep_args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module loaded successfully");
+        return 0;
+    }
+    else {
+        SLOGE("Something wrong with exFAT module");
+        return -1;
+    }
+    return 0;
+}
diff --git a/Exfat.cpp.mine b/Exfat.cpp.mine
new file mode 100644
index 0000000..25c9546
--- /dev/null
+++ b/Exfat.cpp.mine
@@ -0,0 +1,245 @@
+/*
+ * Copyright (C) 2012 The Android Open Source Project
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/mman.h>
+#include <sys/mount.h>
+#include <sys/wait.h>
+
+#include <linux/kdev_t.h>
+#include <logwrap/logwrap.h>
+#include "VoldUtil.h"
+
+#define LOG_TAG "Vold"
+
+#include <cutils/log.h>
+#include <cutils/properties.h>
+
+#include "Exfat.h"
+bool Exfat::moduleLoaded = false;
+
+ static char EXFAT_FSCK[] = "/system/bin/fsck.exfat";
+ static char EXFAT_MKFS[] = "/system/bin/mkfs.exfat";
+ static char INSMOD_PATH[] = "/system/bin/insmod";
+ static char EXFAT_MODULE[] = "/system/lib/modules/exfat.ko";
+ static char GREP_PATH[] = "/system/bin/grep";
+ static char FILESYSTEMS_PATH[] = "/proc/filesystems";
+
+ extern "C" int logwrap(int argc, const char **argv, int background);
+
+int Exfat::doMount(const char *fsPath, const char *mountPoint,
+                 bool ro, bool remount, bool executable,
+                 int ownerUid, int ownerGid, int permMask, bool createLost) {
+    int rc;
+    unsigned long flags;
+    char mountData[255];
+
+    flags = MS_NODEV | MS_NOSUID | MS_DIRSYNC;
+
+    flags |= (executable ? 0 : MS_NOEXEC);
+    flags |= (ro ? MS_RDONLY : 0);
+    flags |= (remount ? MS_REMOUNT : 0);
+
+    if (!moduleLoaded)
+    {
+        int lkm_rc = loadModule();
+        if (lkm_rc)
+            return lkm_rc;
+
+        moduleLoaded = true;
+    }
+    /*
+     * Note: This is a temporary hack. If the sampling profiler is enabled,
+     * we make the SD card world-writable so any process can write snapshots.
+     *
+     * TODO: Remove this code once we have a drop box in system_server.
+     */
+    char value[PROPERTY_VALUE_MAX];
+    property_get("persist.sampling_profiler", value, "");
+    if (value[0] == '1') {
+        SLOGW("The SD card is world-writable because the"
+            " 'persist.sampling_profiler' system property is set to '1'.");
+        permMask = 0;
+    }
+
+    sprintf(mountData,
+            "utf8,uid=%d,gid=%d,fmask=%o,dmask=%o,shortname=mixed",
+            ownerUid, ownerGid, permMask, permMask);
+
+    rc = mount(fsPath, mountPoint, "exfat", flags, mountData);
+
+    if (rc && errno == EROFS) {
+        SLOGE("%s appears to be a read only filesystem - retrying mount RO", fsPath);
+        flags |= MS_RDONLY;
+        rc = mount(fsPath, mountPoint, "exfat", flags, mountData);
+    }
+
+    if (rc == 0 && createLost) {
+        char *lost_path;
+        asprintf(&lost_path, "%s/LOST.DIR", mountPoint);
+        if (access(lost_path, F_OK)) {
+            /*
+             * Create a LOST.DIR in the root so we have somewhere to put
+             * lost cluster chains (fsck_msdos doesn't currently do this)
+             */
+            if (mkdir(lost_path, 0755)) {
+                SLOGE("Unable to create LOST.DIR (%s)", strerror(errno));
+            }
+        }
+        free(lost_path);
+    }
+
+    return rc;
+}
+
+
+int Exfat::check(const char *fsPath) {
+
+    bool rw = true;
+    int rc = -1;
+    int status;
+
+    if (access(EXFAT_FSCK, X_OK)) {
+        SLOGW("Skipping fs checks, exfatfsck not found.\n");
+        return 0;
+    }
+
+    do {
+        const char *args[3];
+        args[0] = EXFAT_FSCK;
+        args[1] = fsPath;
+        args[2] = NULL;
+
+        rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+        switch(rc) {
+        case 0:
+            SLOGI("exFAT filesystem check completed OK.\n");
+            return 0;
+        case 1:
+            SLOGI("exFAT filesystem check completed, errors corrected OK.\n");
+            return 0;
+        case 2:
+            SLOGE("exFAT filesystem check completed, errors corrected, need reboot.\n");
+            return 0;
+        case 4:
+            SLOGE("exFAT filesystem errors left uncorrected.\n");
+            return 0;
+        case 8:
+            SLOGE("exfatfsck operational error.\n");
+            errno = EIO;
+            return -1;
+        default:
+            SLOGE("exFAT filesystem check failed (unknown exit code %d).\n", rc);
+            errno = EIO;
+            return -1;
+        }
+    } while (0);
+
+    return 0;
+}
+
+int Exfat::format(const char *fsPath) {
+
+    int fd;
+    const char *args[3];
+    int rc = -1;
+    int status;
+
+    if (access(EXFAT_MKFS, X_OK)) {
+        SLOGE("Unable to format, mkexfatfs not found.");
+        return -1;
+    }
+
+    args[0] = EXFAT_MKFS;
+    args[1] = fsPath;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false,
+            true);
+
+    if (rc == 0) {
+        SLOGI("Filesystem (exFAT) formatted OK");
+        return 0;
+    } else {
+        SLOGE("Format (exFAT) failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
+
+int Exfat::loadModule(void) {
+    const char *args[5];
+    int rc = -1;
+    int status;
+
+    args[0] = GREP_PATH;
+    args[1] = "-q";
+    args[2] = "exfat";
+    args[3] = FILESYSTEMS_PATH;
+    args[4] = NULL;
+
+    rc = android_fork_execvp(ARRAY_SIZE(args), (char **)args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module already loaded or built-in");
+        return 0;
+    }
+    else {
+        SLOGI("exFAT module not loaded yet");
+    }
+
+    if (access(INSMOD_PATH, X_OK)) {
+        SLOGE("Unable to load exfat.ko module, insmod not found.");
+        return -1;
+    }
+
+    if (access(EXFAT_MODULE, R_OK)) {
+        SLOGE("Unable to load exfat.ko module, exfat.ko not found.");
+        return -1;
+    }
+
+    args[0] = INSMOD_PATH;
+    args[1] = EXFAT_MODULE;
+    args[2] = NULL;
+
+    rc = android_fork_execvp(3, (char **)args, &status, false, true);
+
+    if (rc == 0) {
+        SLOGI("exFAT module loaded OK");
+        return 0;
+    } else {
+        SLOGE("Loading exFAT module failed (unknown exit code %d)", rc);
+        errno = EIO;
+        return -1;
+    }
+    return 0;
+}
diff --git a/Exfat.h b/Exfat.h
index 94c1d05..7dd65eb 100644
--- a/Exfat.h
+++ b/Exfat.h
@@ -22,9 +22,12 @@
 class Exfat {
 public:
     static int doMount(const char *fsPath, const char *mountPoint, bool ro, bool remount,
-            bool executable, int ownerUid, int ownerGid, int permMask);
+            bool executable, int ownerUid, int ownerGid, int permMask, bool createLost);
     static int check(const char *fsPath);
     static int format(const char *fsPath);
+private:
+    static int loadModule(void);
+    static bool moduleLoaded;
 };
 
 #endif
diff --git a/Volume.cpp b/Volume.cpp
index 993cc2b..62ccc44 100644
--- a/Volume.cpp
+++ b/Volume.cpp
@@ -556,7 +556,7 @@ int Volume::mountVol() {
                 }
 
                 if (Exfat::doMount(devicePath, getMountpoint(), false, false, false,
-                        AID_MEDIA_RW, AID_MEDIA_RW, 0007)) {
+                        AID_MEDIA_RW, AID_MEDIA_RW, 0007, true)) {
                     SLOGE("%s failed to mount via EXFAT (%s)\n", devicePath, strerror(errno));
                     continue;
                 }
-- 
1.9.1

